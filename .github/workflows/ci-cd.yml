name: CI/CD Pipeline with PostgreSQL and Registration Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_sautai
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Database configuration for testing
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_sautai
      DJANGO_URL: http://localhost:8000
      DJANGO_SETTINGS_MODULE: settings.test
      SECRET_KEY: test-secret-key-for-ci-cd
      DEBUG: False
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-mock pytest-asyncio playwright psycopg2-binary

      - name: Install Playwright browsers
        run: |
          playwright install chromium

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Registration Validation Tests
        run: |
          python -m pytest tests/test_registration.py -v --tb=short

      - name: Run Integration Tests
        run: |
          python -m pytest tests/test_integration.py -v --tb=short

      - name: Generate Test Report
        if: always()
        run: |
          python -m pytest tests/ --html=report.html --self-contained-html || true

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: report.html

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Zip artifact for deployment
        run: |
          # Create deployment artifact excluding unnecessary files
          zip -r release.zip . \
            -x "venv/*" \
            -x ".git/*" \
            -x "__pycache__/*" \
            -x "*.pyc" \
            -x ".pytest_cache/*" \
            -x "tests/*" \
            -x ".sautai/*" \
            -x "*.log" \
            -x ".DS_Store" \
            -x "node_modules/*"

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip -o release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_C9BE07456C464A73B1E9C234FFEDC1A7 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_8721CFB557924EB1BBC13E0516F2D5DE }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_70886041EB884214B2582D1ED8F91675 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'sautAI'
          slot-name: 'Production' 